using System;
using System.Collections.Generic;
using System.Text;
using NetFwTypeLib;
using System.Security.Principal;

namespace WinFirewallTest
{
    class Program
    {

        static bool isAdmin()
        {
            WindowsIdentity identity = WindowsIdentity.GetCurrent();
            WindowsPrincipal principal = new WindowsPrincipal(identity);
            return principal.IsInRole(WindowsBuiltInRole.Administrator);
        }

        private static string testRuleName = "_TEST RULE WinFirewallTest";

        static void addRule()
        {
            INetFwRule fwr = (INetFwRule)Activator.CreateInstance(Type.GetTypeFromProgID("HNetCfg.FWRule"));
            fwr.Action = NET_FW_ACTION_.NET_FW_ACTION_BLOCK;
            fwr.Description = "Test rule generated by WinFirewallTest app";
            fwr.Direction = NET_FW_RULE_DIRECTION_.NET_FW_RULE_DIR_OUT;
            fwr.Protocol = 6; // TCP [http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xml]
            fwr.LocalPorts = "54321,54322,54323-54330";
            fwr.Enabled = true;
            fwr.InterfaceTypes = "All";
            fwr.Name = testRuleName;
            try
            {
                INetFwPolicy2 firewallPolicy = (INetFwPolicy2)Activator.CreateInstance(
                    Type.GetTypeFromProgID("HNetCfg.FwPolicy2"));
                firewallPolicy.Rules.Add(fwr);
            }
            catch (Exception ee)
            {
                Console.WriteLine("Can not CREATE/ADD rule.\r\n" + ee.ToString());
            }
        }

        static void deleteRule()
        {
            try
            {
                INetFwPolicy2 firewallPolicy = (INetFwPolicy2)Activator.CreateInstance(
                    Type.GetTypeFromProgID("HNetCfg.FwPolicy2"));
                firewallPolicy.Rules.Remove(testRuleName);
            }
            catch (Exception ee)
            {
                Console.WriteLine("Can not REMOVE rule.\r\n" + ee.ToString());
            }
        }


        static void Main(string[] args)
        {
            INetFwMgr mgr = null;
            try
            { 
                mgr = (INetFwMgr)Activator.CreateInstance(Type.GetTypeFromProgID("HNetCfg.FwMgr"));
            }
            catch
            {
                Console.WriteLine("Unable to init Firewall Manager.");
                Console.ReadKey();
                return;
            }

            if (mgr.LocalPolicy.CurrentProfile.FirewallEnabled)
            {
                Console.WriteLine("Windows Firewall is active.");
            }
            else
            {
                Console.WriteLine("Windows Firewall is disabled.");
            }
            
            

            Console.WriteLine("List rules? [y/n] ");
            //ConsoleKeyInfo key = ;

            if (Console.ReadKey().Key == ConsoleKey.Y)
            {
                // list rules
                INetFwPolicy2 fwPolicy2 = null;
                try
                {
                    fwPolicy2 = (INetFwPolicy2)Activator.CreateInstance(Type.GetTypeFromProgID("HNetCfg.FwPolicy2"));
                }
                catch
                {
                    Console.WriteLine("Unable to init Firewall Policy Object.");
                    Console.ReadKey();
                    return;
                }
                foreach (INetFwRule rule in fwPolicy2.Rules)
                {
                    Console.WriteLine("Name:    " + rule.Name);
                    Console.WriteLine("+++++++++++++++++++++++++++++++");
                    //               +- xxxxxxx: ...
                    Console.Write("  +- Dir:     ");
                    switch (rule.Direction)
                    {
                        case NET_FW_RULE_DIRECTION_.NET_FW_RULE_DIR_IN: Console.WriteLine("Inbound"); break;
                        case NET_FW_RULE_DIRECTION_.NET_FW_RULE_DIR_OUT: Console.WriteLine("Outbound"); break;
                    }
                    //               +- xxxxxxx: ...
                    Console.Write("  +- Action:  ");
                    switch (rule.Action)
                    {
                        case NET_FW_ACTION_.NET_FW_ACTION_ALLOW: Console.WriteLine("ALLOW"); break;
                        case NET_FW_ACTION_.NET_FW_ACTION_BLOCK: Console.WriteLine("!DENY!"); break;
                        case NET_FW_ACTION_.NET_FW_ACTION_MAX: Console.WriteLine("MAXIMUM TRAFFIC"); break;
                    }
                    Console.WriteLine("  +- Desc:    " + rule.Description);
                    Console.WriteLine("  +- AppName: " + rule.ApplicationName);
                    Console.WriteLine("  +- SrvName: " + rule.serviceName);
                    Console.WriteLine("  +- Enabled: " + (rule.Enabled ? "ENABLED" : "DISABLED"));

                    Console.Write("  +- Proto:   " + (rule.Protocol.ToString()) + " [");
                    switch (rule.Protocol)
                    {
                        case 1: Console.Write("ICMP"); break;
                        case 2: Console.Write("IGMP"); break;
                        case 4: Console.Write("IPv4"); break;
                        case 6: Console.Write("TCP"); break;
                        case 17: Console.Write("UDP"); break;
                        case 27: Console.Write("RDP"); break;
                        case 41: Console.Write("IPv6"); break;
                    }
                    Console.WriteLine("]");
                    //               +- xxxxxxx: ...
                    Console.WriteLine("  +- LocAddr: " + (rule.LocalAddresses));
                    Console.WriteLine("  \\- LocPort: " + (rule.LocalPorts));
                    //               +- xxxxxxx: ...
                    //Console.WriteLine(": " + (rule));
                    //Console.WriteLine(": " + (rule));
                    //Console.WriteLine(": " + (rule));
                    //Console.WriteLine(": " + (rule));
                    Console.WriteLine("");


                    //Console.WriteLine("" + rule);
                    //Console.WriteLine("" + rule);
                    //Console.WriteLine("" + rule);
                }
            }

            if (!isAdmin())
            {
                Console.WriteLine("You are not running this program in Administrator mode, adding/removing rule may not work.");
            }

            Console.Write(Environment.NewLine + Environment.NewLine + "Add test rule? [y/n] ");

            if (Console.ReadKey().Key == ConsoleKey.Y)
            {
                addRule();
                Console.Write(Environment.NewLine + Environment.NewLine + "Remove test rule? [y/n] ");
                if (Console.ReadKey().Key == ConsoleKey.Y)
                {
                    deleteRule();
                }
            }

            Console.WriteLine(Environment.NewLine + Environment.NewLine + Environment.NewLine + "Any key to end.");
            Console.ReadKey();
        }
    }
}
